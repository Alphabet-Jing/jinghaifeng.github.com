---
layout: post
keywords: blog
description: blog
title: "Linux Shell 正则表达式简略记录"
categories: [Linux]
tags: [Linux]
---
{% include JB/setup %}

# Linux Shell 正则表达式简略记录

##正则表达式与通配符

1. 正则表达式一般来说：

	>主要用于字符串的分割、**匹配**、查找及替换操作。**匹配**是其主要业务。

2. 正则表达式与通配符

	* 正则表达式用来在文件中匹配符合字符条件的字符串，正则是**包含匹配**。 grep 、awk 、send 等命令可以支持正则表达式。
 * 通配符用来匹配符合条件的文件名，通配符是**完全匹配**。ls 、find 、cp 这些命令不支持正则表达式，所以只有使用 shell 自己的通配符进行匹配。
	
	|通配符|作用|
 	|---|----|
 	| * | 匹配任意内容|
 	| ? | 匹配任意一个内容|
 	| [] | 匹配括号中的一个字符|
 
 	| 正则元字符 | 作用 |
	|-------|-------|
 	| * | 前一个字符匹配 0 次或任意多次|
 	| . | 匹配**除了换行符**外任意一个字符|
 	| ^ | 匹配行首。例如： ^hello 会匹配 hello 开头的行。|
 	| $ | 匹配行尾。例如： hello$ 会匹配 hello 结尾的行。|
 	| []| 匹配中括号中指定的任意一个字符，**只匹配一个字符**。例如： [aeiou] 匹配任意一个元音字母， [0-9] 匹配任意一位数字， [a-z][0-9] 匹配一个小写字母和一位数字构成的两位字符。|
 	|[^]| 匹配**除**中括号内的字符意外的任意一个字符。例如： [^0-9] 匹配任意一个非数字字符， [^a-z]匹配任意一个非小写字母。|
 	| \ | 转义符。用来取消特殊符号的含义。|
 	|\{n\}| 前字符恰好出现 n 次。例如： [0-9]\{4\} 匹配 4 位数字，[1][3-9][0-9]\{9\} 匹配手机号码(粗略)。**注意：**需加入定界符才能保证只出现三个字符。|
 	|\{n,\}| 前面的字符最少出现 n 次。例如： [0-9]\{2,\} 匹配两位及以上的数字。|
 	|\{n,m\}| 前面的字符最少出现 n 次，最多出现 m 次。例如：[a-z]\{6,8\} 匹配6位到8位的小写字母。
 
##字符截取命令

 * **cut**

		cut [选项] 文件名
		选项：
		-f 列号：提取第几列，可以多列，以 "," 号连接例如 -d 1,3 表示第一第三列。
		-d 分隔符：按照指定分隔符分割列 。注意：分隔符小心空格和制表符。
 
* **print**
 		
		printf <输出类型输出格式> 输出内容
		输出类型：
		- %ns: 输出字符串。n 是数字指代输出几个字符。
		- %ni: 输出整数。n 是数字指代输出几个数字。
		- %m.nf: 输出浮点数。m 和 n 是数字，指代输出的有效位数，小数位。例如：%8.2f代表输出八位有效数，其中2位时小数，6位整数。

		输出格式：
		- \a: 输出警告声音。注意：只有本机 linux 能够出声音。
		- \b: 输出退格键，也就是 BackSpace 键。
		- \f: 清除屏幕。
		- \n: 换行。
		- \r: 回车，也就是 Enter 键。
		- \t: 水平输出退格键，也就是 Tab 键。
		- \v: 垂直输出退格键，也就是 Tab 键。 
		
		printf 不支持数据流，只能建立变量。
		输出文件内容：printf '%s' $(cat file_name)

 * **awk**
	
		awk '条件1{动作1}条件2{动作2}...' 文件名

		条件 (Pattern)：
		- 一般使用关系表达式作为条件。
		- x > 10 判断变量时候大于10。
		- x >= 10 大于等于。
		- x <=  10 小于等于。

		动作 (Action)：
		- 格式化输出。
		- 流程控制语句。

		**BEGIN**替换分隔符有用。
		awk 'BEGIN{print "test"}{print $2 "\t" $4}' students.txt
		**END**
		awk 'END{print "test"}{print $2 "\t" $4}' students.txt

* **sed**
		
		sed [选项] '[动作]' 文件名
		选项：
		—— -n: 一般 sed 命令会把所有的数据都输出到屏幕，如果加入此选择则会把经过 sed 命令处理的行都输出到屏幕。
		—— -e: 允许对输入数据应用多条 sed 命令编辑。
		—— -i: 用 sed 的修改结果直接修改读取数据的文件，而不是由屏幕输出。

		动作：
		—— a: 追加，在当前行后添加一行或多行。
		—— c: 行替换，在c后面的字符串替换成原数据行。
		—— d: 删除指定行。
		—— i: 插入，在当前行前插入一行或多行。
		—— p:打印，输出指定行。
		—— s:字串替换，用一个字符替换另外一个字符串，格式为“行范围s/旧字符串/新字符串/g（vim中的替换格式类似）
 
		例子:sed -n '2p' students.txt （打印文件中第二行，若无n，则会输出所有文档，同时第二行输出2遍）
		
			 sed '2,4d' students.txt  （打印删除第二行 到 第四行的结果，并不会修改源文件内容）

			 sed '4s/xiaoxiao/dada/g' students.txt （将第四行的所有xiaoxiao修改为dada）
			 
			 sed -e 's/20/50/g;3s/ff/dd/g' students.txt （执行两条语句）
			
	**注意：**所有为加入 -i 命令的操作，都不会修改源文件。若要执行 -i 需确定操作时候正确，因对源文件有修改。

##字符处理命令

* sort [选项] 文件名
	* -f: 会略大小写
	* -n: 以数值类型进行排序，默认使用字符串型排序
	* -r: 反向排序
	* -t: 指定分隔符，默认分隔符为制表符
	* -k n[,m]: 按照指定的字段范围排序，从第 n 字段开始， m 字段结束（默认是到行尾）
			

